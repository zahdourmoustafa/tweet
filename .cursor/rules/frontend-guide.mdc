
# Frontend Guidelines & Architecture

## Introduction
This document provides comprehensive guidelines for the frontend development of the tweet inspiration tool. It covers the technology stack, architecture patterns, component structure, styling guidelines, and best practices to ensure a consistent, maintainable, and scalable frontend codebase.



## Technology Stack

### Core Framework
The application is built using Next.js 14 with the App Router, providing server-side rendering capabilities, optimized performance, and excellent developer experience. Next.js offers built-in optimization features such as automatic code splitting, image optimization, and API routes that align perfectly with our serverless architecture on Vercel.

### UI Framework & Styling
Tailwind CSS serves as the primary styling framework, offering utility-first CSS classes that enable rapid development while maintaining design consistency. The framework's responsive design utilities ensure seamless adaptation across different screen sizes and devices. Shadcn UI components provide pre-built, accessible, and customizable React components that follow modern design principles and maintain consistency throughout the application.

### State Management
For state management, the application utilizes React's built-in hooks (useState, useEffect, useContext) for local component state and simple global state management. For more complex state scenarios involving user authentication and global application state, Zustand is recommended as a lightweight alternative to Redux, providing a simple and intuitive API for state management without the boilerplate typically associated with Redux.

### AI Integration
The Vercel AI SDK handles all AI-related functionality, providing seamless integration with OpenAI and other AI providers. This SDK offers streaming capabilities, built-in error handling, and optimized performance for AI-powered features. The SDK's React hooks simplify the integration of AI features into React components while maintaining type safety and excellent developer experience.

### Authentication
Supabase Auth provides secure user authentication with support for email/password authentication, social logins, and session management. The Supabase client library offers React hooks that integrate seamlessly with Next.js, providing real-time authentication state updates and automatic token refresh.



## Project Structure

### Directory Organization
The project follows Next.js 14 App Router conventions with a clear separation of concerns and modular architecture. The recommended directory structure promotes maintainability and scalability while following industry best practices.

```
src/
├── app/                    # Next.js App Router pages and layouts
│   ├── (auth)/            # Authentication route group
│   │   ├── login/
│   │   └── signup/
│   ├── dashboard/         # Main application dashboard
│   ├── globals.css        # Global styles and Tailwind imports
│   ├── layout.tsx         # Root layout component
│   └── page.tsx           # Home page
├── components/            # Reusable UI components
│   ├── ui/               # Shadcn UI components
│   ├── auth/             # Authentication-related components
│   ├── tweet/            # Tweet-related components
│   ├── ai/               # AI enhancement components
│   └── layout/           # Layout components (header, sidebar, etc.)
├── lib/                  # Utility functions and configurations
│   ├── supabase.ts       # Supabase client configuration
│   ├── ai.ts             # AI SDK configuration
│   ├── utils.ts          # General utility functions
│   └── validations.ts    # Form validation schemas
├── hooks/                # Custom React hooks
│   ├── useAuth.ts        # Authentication hook
│   ├── useTweets.ts      # Tweet data fetching hook
│   └── useAI.ts          # AI enhancement hook
├── types/                # TypeScript type definitions
│   ├── auth.ts           # Authentication types
│   ├── tweet.ts          # Tweet-related types
│   └── ai.ts             # AI-related types
└── store/                # State management (Zustand stores)
    ├── authStore.ts      # Authentication state
    ├── tweetStore.ts     # Tweet data state
    └── uiStore.ts        # UI state (modals, loading states)
```

### Component Architecture
Components are organized following the Atomic Design methodology, promoting reusability and maintainability. Each component directory includes the component file, associated styles (if any), tests, and documentation.

**Atoms:** Basic building blocks such as buttons, inputs, and icons that cannot be broken down further.

**Molecules:** Combinations of atoms that form functional units, such as search bars, tweet cards, or form fields.

**Organisms:** Complex components that combine molecules and atoms to form distinct sections of the interface, such as the tweet feed, AI enhancement panel, or navigation header.

**Templates:** Page-level components that define the overall layout and structure, providing the framework for specific pages.

**Pages:** Specific instances of templates with real content and data, representing the actual pages users interact with.


## Component Guidelines

### Component Structure
Every component should follow a consistent structure that promotes readability and maintainability. Components are written as functional components using TypeScript, with clear prop interfaces and comprehensive JSDoc documentation.

```typescript
interface ComponentProps {
  // Prop definitions with clear types
  title: string;
  isLoading?: boolean;
  onAction?: (data: any) => void;
}

/**
 * Component description explaining its purpose and usage
 * @param props - Component props
 * @returns JSX element
 */
export function Component({ title, isLoading = false, onAction }: ComponentProps) {
  // Component logic
  return (
    // JSX structure
  );
}
```

### Naming Conventions
Components use PascalCase naming convention, with descriptive names that clearly indicate their purpose and functionality. File names match component names, and directories use kebab-case for multi-word names.

**Component Names:** `TweetCard`, `AIEnhancementPanel`, `UserProfile`
**File Names:** `TweetCard.tsx`, `AIEnhancementPanel.tsx`, `UserProfile.tsx`
**Directory Names:** `tweet-card/`, `ai-enhancement-panel/`, `user-profile/`

### Props and State Management
Components receive data through props and manage local state using React hooks. Props are typed using TypeScript interfaces, ensuring type safety and better developer experience. State updates follow immutable patterns, and side effects are handled using useEffect with proper dependency arrays.

### Event Handling
Event handlers are defined using arrow functions and follow a consistent naming pattern with the "handle" prefix. Event handlers are memoized using useCallback when necessary to prevent unnecessary re-renders.

```typescript
const handleTweetSelect = useCallback((tweetId: string) => {
  // Event handling logic
}, [dependencies]);
```

### Error Boundaries
Critical components are wrapped with error boundaries to gracefully handle runtime errors and provide fallback UI. Error boundaries are implemented as class components or using libraries like react-error-boundary for functional component support.


## Styling Guidelines

### Tailwind CSS Best Practices
Tailwind CSS classes are applied following a mobile-first approach, with responsive modifiers applied progressively for larger screen sizes. Classes are organized logically within the className attribute, grouping related properties together for better readability.

```typescript
<div className="
  flex flex-col gap-4 p-4
  md:flex-row md:gap-6 md:p-6
  lg:gap-8 lg:p-8
  bg-white dark:bg-gray-900
  border border-gray-200 dark:border-gray-700
  rounded-lg shadow-sm
">
```

### Design System
The application follows a consistent design system with predefined color palettes, typography scales, spacing units, and component variants. This design system is implemented through Tailwind CSS custom configuration and Shadcn UI component theming.

**Color Palette:**
- Primary: Blue shades for main actions and branding
- Secondary: Gray shades for text and subtle elements
- Success: Green shades for positive actions and feedback
- Warning: Yellow/Orange shades for caution and alerts
- Error: Red shades for errors and destructive actions

**Typography:**
- Headings: Font weights 600-700 with appropriate line heights
- Body text: Font weight 400 with optimal line height for readability
- Captions: Smaller font sizes for secondary information

**Spacing:**
- Consistent spacing scale using Tailwind's spacing utilities
- Logical spacing patterns for margins, padding, and gaps

### Dark Mode Support
The application supports both light and dark themes using Tailwind CSS dark mode utilities. Theme switching is implemented through a context provider that manages the current theme state and applies appropriate classes to the root element.

### Responsive Design
All components are designed with mobile-first responsive principles, ensuring optimal user experience across all device sizes. Breakpoints follow Tailwind CSS conventions (sm, md, lg, xl, 2xl) with progressive enhancement for larger screens.

### Animation and Transitions
Subtle animations and transitions enhance user experience without being distracting. Tailwind CSS transition utilities are used for hover effects, state changes, and micro-interactions. More complex animations are implemented using CSS-in-JS libraries or Framer Motion when necessary.


## Data Fetching and API Integration

### API Communication
All API communication is handled through custom hooks that encapsulate data fetching logic and provide consistent error handling and loading states. These hooks use the native fetch API or libraries like SWR for caching and revalidation.

```typescript
export function useTweets(topic: string) {
  const [tweets, setTweets] = useState<Tweet[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchTweets = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await fetch(`/api/tweets/inspiration?topic=${topic}`);
      if (!response.ok) throw new Error('Failed to fetch tweets');
      
      const data = await response.json();
      setTweets(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setIsLoading(false);
    }
  }, [topic]);

  useEffect(() => {
    if (topic) fetchTweets();
  }, [topic, fetchTweets]);

  return { tweets, isLoading, error, refetch: fetchTweets };
}
```

### Error Handling
API errors are handled gracefully with user-friendly error messages and appropriate fallback UI. Error states are displayed using toast notifications or inline error messages, depending on the context and severity of the error.

### Loading States
Loading states are implemented consistently across the application using skeleton components, spinners, or progress indicators. Loading states provide visual feedback to users during data fetching operations and maintain perceived performance.

### Caching Strategy
Data caching is implemented to reduce API calls and improve performance. SWR or React Query can be used for automatic caching, background revalidation, and optimistic updates. Cache invalidation strategies ensure data freshness when necessary.

### Real-time Updates
For features requiring real-time updates, WebSocket connections or Server-Sent Events are implemented through Supabase real-time subscriptions. These connections are managed through custom hooks that handle connection lifecycle and cleanup.


## Performance Optimization

### Code Splitting and Lazy Loading
Components are lazy-loaded using React.lazy() and Suspense to reduce initial bundle size and improve loading performance. Route-based code splitting is implemented automatically through Next.js App Router, while component-level splitting is applied to heavy components that are not immediately visible.

```typescript
const AIEnhancementPanel = lazy(() => import('./AIEnhancementPanel'));

function App() {
  return (
    <Suspense fallback={<LoadingSpinner />}>
      <AIEnhancementPanel />
    </Suspense>
  );
}
```

### Image Optimization
Next.js Image component is used for all images to provide automatic optimization, lazy loading, and responsive image serving. Images are properly sized and compressed to minimize bandwidth usage while maintaining visual quality.

### Bundle Optimization
Webpack bundle analysis is performed regularly to identify and eliminate unnecessary dependencies. Tree shaking is enabled to remove unused code, and dynamic imports are used for large libraries that are not always needed.

### Memory Management
Component cleanup is implemented properly to prevent memory leaks. Event listeners, timers, and subscriptions are cleaned up in useEffect cleanup functions. Large data structures are managed efficiently, with pagination or virtualization for long lists.

### Rendering Optimization
React.memo is used to prevent unnecessary re-renders of components that don't depend on changed props. useMemo and useCallback hooks are applied judiciously to expensive calculations and function references that are passed to child components.

### Monitoring and Analytics
Performance monitoring is implemented using Vercel Analytics and Web Vitals to track Core Web Vitals metrics. Performance budgets are established for bundle size, loading times, and runtime performance to maintain optimal user experience.


## Accessibility and Testing

### Accessibility Standards
The application follows WCAG 2.1 AA accessibility guidelines to ensure usability for all users, including those with disabilities. Semantic HTML elements are used appropriately, and ARIA attributes are applied where necessary to enhance screen reader compatibility.

**Keyboard Navigation:** All interactive elements are accessible via keyboard navigation with visible focus indicators and logical tab order.

**Color Contrast:** Color combinations meet WCAG contrast requirements, with alternative indicators for color-blind users.

**Screen Reader Support:** Proper heading hierarchy, alt text for images, and descriptive labels for form elements ensure compatibility with assistive technologies.

**Focus Management:** Focus is managed appropriately during navigation and modal interactions, with focus trapping in modal dialogs and proper focus restoration.

### Testing Strategy
Comprehensive testing ensures code quality, functionality, and user experience. The testing strategy includes unit tests, integration tests, and end-to-end tests using modern testing frameworks.

**Unit Testing:** Jest and React Testing Library are used for component unit tests, focusing on component behavior and user interactions rather than implementation details.

**Integration Testing:** API integration tests verify data flow between frontend and backend components, ensuring proper error handling and data transformation.

**End-to-End Testing:** Playwright or Cypress tests simulate real user workflows, testing critical user journeys and ensuring the application works correctly in production-like environments.

**Accessibility Testing:** Automated accessibility testing is integrated into the CI/CD pipeline using tools like axe-core to catch accessibility issues early in development.

### Code Quality
ESLint and Prettier are configured to maintain consistent code style and catch potential issues. TypeScript strict mode is enabled to provide comprehensive type checking and prevent runtime errors. Pre-commit hooks ensure code quality standards are maintained across the development team.

